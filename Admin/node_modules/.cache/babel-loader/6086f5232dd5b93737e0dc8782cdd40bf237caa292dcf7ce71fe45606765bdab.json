{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\n\n// index.ts\nimport { rectangleGrid } from \"@turf/rectangle-grid\";\nfunction squareGrid(bbox, cellSide) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return rectangleGrid(bbox, cellSide, cellSide, options);\n}\n__name(squareGrid, \"squareGrid\");\nvar turf_square_grid_default = squareGrid;\nexport { turf_square_grid_default as default, squareGrid };","map":{"version":3,"names":["rectangleGrid","squareGrid","bbox","cellSide","options","arguments","length","undefined","__name","turf_square_grid_default"],"sources":["D:\\NXG_Deploy\\Admin\\node_modules\\@turf\\square-grid\\index.ts"],"sourcesContent":["import {\n  FeatureCollection,\n  Polygon,\n  BBox,\n  Feature,\n  MultiPolygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { Units } from \"@turf/helpers\";\nimport { rectangleGrid } from \"@turf/rectangle-grid\";\n\n/**\n * Creates a square grid from a bounding box.\n *\n * @name squareGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide of each cell, in units\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees,\n * radians, miles, or kilometers\n * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon,\n * the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} grid a grid of polygons\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var squareGrid = turf.squareGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [squareGrid]\n */\n\nfunction squareGrid<P extends GeoJsonProperties = GeoJsonProperties>(\n  bbox: BBox,\n  cellSide: number,\n  options: {\n    units?: Units;\n    properties?: P;\n    mask?: Feature<Polygon | MultiPolygon> | Polygon | MultiPolygon;\n  } = {}\n): FeatureCollection<Polygon, P> {\n  return rectangleGrid(bbox, cellSide, cellSide, options);\n}\n\nexport { squareGrid };\nexport default squareGrid;\n"],"mappings":";;;;;;;AASA,SAASA,aAAA,QAAqB;AA0B9B,SAASC,WACPC,IAAA,EACAC,QAAA,EAM+B;EAAA,IAL/BC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAII,CAAC;EAEL,OAAOL,aAAA,CAAcE,IAAA,EAAMC,QAAA,EAAUA,QAAA,EAAUC,OAAO;AACxD;AAVSI,MAAA,CAAAP,UAAA;AAaT,IAAOQ,wBAAA,GAAQR,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}